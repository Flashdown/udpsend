name: Build udpsend

on:
  push:
    tags:
      - '*'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3


      # Linux: Set up C++ compiler
 #     - name: Set up C++ compiler (Linux)
 #       if: runner.os == 'Linux'
 #       run: |
 #         sudo apt-get update
 #         sudo apt-get install -y g++ make

      # macOS: Set up C++ compiler
#      - name: Set up C++ compiler (macOS)
#        if: runner.os == 'macOS'
#        run: |
#          brew update
#          brew install gcc make

      # Windows: Set up MSVC environment
      - name: Set up MSVC compiler
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath > vs_path.txt
          set /p VS_PATH=<vs_path.txt
          call "%VS_PATH%\VC\Auxiliary\Build\vcvars64.bat"

      # Build the program
#      - name: Build udpsend (Linux)
#        if: runner.os == 'Linux'
#        run: |
#          g++ -o udpsend udpsend.cpp

#      - name: Build udpsend (macOS)
#        if: runner.os == 'macOS'
#        run: |
#          g++ -o udpsend udpsend.cpp

      - name: Build udpsend (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath > vs_path.txt
          set /p VS_PATH=<vs_path.txt
          call "%VS_PATH%\VC\Auxiliary\Build\vcvars64.bat"
          cl /EHsc udpsend.cpp ws2_32.lib /Feudpsend.exe

      # Test the program (optional)
#      - name: Test udpsend (Linux)
#        if: runner.os == 'Linux'
#        run: |
#          echo "Testing udpsend on Linux"
#          ./udpsend 127.0.0.1 12345 "Test Message"

#      - name: Test udpsend (macOS)
#        if: runner.os == 'macOS'
#        run: |
#          echo "Testing udpsend on macOS"
#          ./udpsend 127.0.0.1 12345 "Test Message"

      - name: Test udpsend (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          echo "Testing udpsend on Windows"
          udpsend.exe 127.0.0.1 12345 "Test Message"


      # Upload the binary artifact
#      - name: Upload artifact (Linux/macOS)
#        if: runner.os == 'Linux' || runner.os == 'macOS'
#        uses: actions/upload-artifact@v3
#        with:
#          name: udpsend-${{ matrix.os }}
#          path: ./udpsend

      - name: Upload artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: udpsend-windows
          path: ./udpsend.exe

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Download the artifacts from the build job
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: List downloaded artifacts
        run: ls -la ./artifacts

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
#          files: ./artifacts/*
          files: ./artifacts/**/*
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      # Publish the release
#      - name: Create GitHub release
#        uses: actions/create-release@v1
#        with:
 #         tag_name: ${{ github.ref_name }}
 #         release_name: "Release ${{ github.ref_name }}"
 #         body: "Auto-generated release for tag ${{ github.ref_name }}."
  #        files: ./artifacts/* # Correctly reference the downloaded artifacts
  #        draft: true
  #        prerelease: true
 #       env:
 #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#      - name: Create GitHub Release
#        uses: softprops/action-gh-release@v1
#        with:
#          files: ./artifacts/*
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
